name: Upload Test Coverage
on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-and-report-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: |
          npm test -- --coverage
          echo "Coverage report generated"

      - name: Display coverage summary
        run: |
          echo "Coverage Summary:"
          cat coverage/coverage-summary.json | jq .

      - name: Send detailed coverage report to application
        env:
          API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
          API_KEY: ${{ secrets.WEBHOOK_SECRET }}
          REPO_ID: ${{ github.repository_id }}
          REPO_NAME: ${{ github.repository }}
          COMMIT_SHA: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          # Ensure jq is installed
          if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
          fi
      
          # Find coverage report file
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE_FILE="coverage/coverage-summary.json"
          elif [ -f "coverage/coverage-final.json" ]; then
            COVERAGE_FILE="coverage/coverage-final.json"
          else
            echo "Looking for any coverage JSON files..."
            COVERAGE_FILE=$(find coverage -name "*.json" | head -n 1)
            
            if [ -z "$COVERAGE_FILE" ]; then
              echo "No coverage JSON files found"
              exit 1
            fi
          fi
          
          echo "Using coverage file: $COVERAGE_FILE"
          
          # Read the raw coverage data
          RAW_COVERAGE=$(cat $COVERAGE_FILE)
          
          # Extract metrics if present in a standard format
          if jq -e '.total' $COVERAGE_FILE > /dev/null 2>&1; then
            STATEMENTS=$(jq -r '.total.statements.pct' $COVERAGE_FILE)
            BRANCHES=$(jq -r '.total.branches.pct' $COVERAGE_FILE)
            FUNCTIONS=$(jq -r '.total.functions.pct' $COVERAGE_FILE)
            LINES=$(jq -r '.total.lines.pct' $COVERAGE_FILE)
            
            METRICS="{\"statements\":$STATEMENTS,\"branches\":$BRANCHES,\"functions\":$FUNCTIONS,\"lines\":$LINES}"
          else
            echo "Standard metrics not found in coverage file"
            METRICS="{}"
          fi
      
          # Create a simplified payload with raw coverage data
          PAYLOAD=$(jq -n \
            --arg message "Test coverage report" \
            --arg repo_id "$REPO_ID" \
            --arg repo_name "$REPO_NAME" \
            --arg commit "$COMMIT_SHA" \
            --arg branch "$BRANCH_NAME" \
            --argjson metrics "$METRICS" \
            --argjson raw_coverage "$RAW_COVERAGE" \
            '{
              message: $message,
              repository_id: $repo_id,
              repository_name: $repo_name,
              commit: $commit,
              branch: $branch,
              timestamp: (now | todate),
              metrics: $metrics,
              raw_coverage_data: $raw_coverage
            }')
      
          # Send the coverage data to the API endpoint
          HTTP_STATUS=$(curl -s -o response.txt -w "%{http_code}" \
            -X POST "$API_ENDPOINT" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $API_KEY" \
            -d "$PAYLOAD")
      
          # Check if the request was successful
          if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]]; then
            echo "Coverage report successfully sent! Response:"
            cat response.txt | jq .
          else
            echo "Failed to send coverage report. Status code: $HTTP_STATUS"
            cat response.txt
            exit 1
          fi
