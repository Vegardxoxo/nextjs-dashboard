name: Test and Notify
on:
  workflow_dispatch:
jobs:
  test-and-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout student repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: |
          npm test -- --coverage
          echo "Coverage report generated"
      

      - name: Send simple payload (Hello World) to application
        env:
          API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
          API_KEY: ${{ secrets.WEBHOOK_SECRET }}
          REPO_ID: ${{ github.repository_id }}
          REPO_NAME: ${{ github.repository }}
        run: |
          # Define a simple payload
          PAYLOAD="{\"message\": \"Hello World\", \"repository_id\": \"$REPO_ID\", \"repository_name\": \"$REPO_NAME\"}"


          # Send the data to the API endpoint
          HTTP_STATUS=$(curl -s -o response.txt -w "%{http_code}" \
            -X POST "$API_ENDPOINT" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $API_KEY" \
            -d "$PAYLOAD")

          # Check if the request was successful
          if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]]; then
            echo "Payload successfully sent! Response:"
            cat response.txt
          else
            echo "Failed to send payload. Status code: $HTTP_STATUS"
            cat response.txt
            exit 1
          fi
      - name: Send Jest coverage report to application
        env:
          API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
          API_KEY: ${{ secrets.WEBHOOK_SECRET }}
          REPO_ID: ${{ github.repository_id }}
          REPO_NAME: ${{ github.repository }}
        run: |
          # Install jq if needed for JSON processing
          if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
          fi

          # Check for Jest coverage summary file
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE_FILE="coverage/coverage-summary.json"
          elif [ -f "coverage/coverage-final.json" ]; then
            COVERAGE_FILE="coverage/coverage-final.json"
          else
            echo "No coverage report found at expected locations"
            # Try to find any JSON files in the coverage directory
            COVERAGE_FILE=$(find coverage -name "*.json" | head -n 1)

            if [ -z "$COVERAGE_FILE" ]; then
              echo "No coverage JSON files found"
              exit 1
            fi

            echo "Using coverage file: $COVERAGE_FILE"
          fi

          # Extract total coverage metrics from the Jest coverage report
          # For coverage-summary.json format
          if grep -q "total" "$COVERAGE_FILE"; then
            COVERAGE_SUMMARY=$(jq '.total' "$COVERAGE_FILE")
          else
            # For coverage-final.json format, create a simplified summary
            # This is more complex and depends on your exact needs
            echo "Creating simplified summary from detailed coverage report"
            COVERAGE_SUMMARY="{}"
          fi

          # Create the payload with repository info and coverage data
          PAYLOAD=$(jq -n \
            --arg message "Jest test coverage report" \
            --arg repo_id "$REPO_ID" \
            --arg repo_name "$REPO_NAME" \
            --argjson coverage "$COVERAGE_SUMMARY" \
            '{
              message: $message, 
              repository_id: $repo_id, 
              repository_name: $repo_name, 
              coverage: $coverage
            }')

          # Send the data to the API endpoint
          HTTP_STATUS=$(curl -s -o response.txt -w "%{http_code}" \
            -X POST "$API_ENDPOINT" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $API_KEY" \
            -d "$PAYLOAD")

          # Check if the request was successful
          if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]]; then
            echo "Coverage report successfully sent! Response:"
            cat response.txt
          else
            echo "Failed to send coverage report. Status code: $HTTP_STATUS"
            cat response.txt
            exit 1
          fi